#!/usr/bin/env python -W ignore::DeprecationWarning
# coding: utf-8

"""
REQUIRES
> greedy
> HD-BET
> MNI atlas files
> Model files
"""
import os
import multiprocessing
import sys
import tempfile
import shutil
import argparse

from LST_AI.strip import run_hdbet, apply_mask
from LST_AI.register import mni_registration, apply_warp, rigid_reg
from LST_AI.segment import unet_segmentation
from LST_AI.annotate import annotate_lesions
from LST_AI.stats import compute_stats
from LST_AI.utils import download_data

if __name__ == "__main__":

    print("###########################\n")
    print("Thank you for using LST-AI. If you publish your results, please cite our paper:")
    print("Wiltgen T, McGinnis J, Schlaeger S, Voon C, Berthele A, Bischl D, Grundl L, Will N, Metz M, Schinz D, Sepp D,"
      "Prucker P, Schmitz-Koep B, Zimmer C, Menze B, Rueckert D, Hemmer B, Kirschke J, Muehlau M, Wiestler B. "
      "LST-AI: a Deep Learning Ensemble for Accurate MS Lesion Segmentation. medRxiv preprint 10.1101/2023.11.23.23298966, "
      "2023.")
    print("###########################\n")

    parser = argparse.ArgumentParser(description='Segment / Label MS lesions according to McDonald criteria.')

    # Input Images
    parser.add_argument('--t1',
                        dest='t1',
                        help='Path to T1 image',
                        type=str,
                        required=True)
    parser.add_argument('--flair',
                        dest='flair',
                        help='Path to FLAIR image',
                        type=str,
                        required=True)
    # Output Images
    parser.add_argument('--output',
                        dest='output',
                        help='Path to output segmentation nifti path.',
                        type=str,
                        required=True)

    parser.add_argument('--existing_seg',
                        dest='existing_seg',
                        default='',
                        help='Path to output segmentation image (will be saved in FLAIR space)',
                        type=str)

    # Temporary directory
    parser.add_argument('--temp',
                        dest='temp',
                        default='',
                        help='Path to temp directory.',
                        type=str)

    # Mode (segment only, annotate only, segment+annotate (default))
    parser.add_argument('--segment_only',
                        action='store_true',
                        dest='segment_only',
                        help='Only perform the segmentation, and skip lesion annotation.')

    parser.add_argument('--annotate_only',
                        action='store_true',
                        dest='annotate_only',
                        help='Only annotate lesion files without segmentation of lesions.')

    parser.add_argument('--stripped',
                        action='store_true',
                        dest='stripped',
                        help='Images are already skull stripped. Skip skull-stripping.')

    # Model Settings
    parser.add_argument('--threshold',
                        dest='threshold',
                        help='Threshold for binarizing the joint segmentation (default: 0.5)',
                        type=float,
                        default=0.5)

    parser.add_argument('--fast-mode',
                        action='store_true',
                        dest='fast',
                        help='Only use one model for hd-bet.')

    # Computing Resources
    parser.add_argument('--device',
                        dest='device',
                        help='Either int for GPU ID or "cpu" for CPU (default: 0)',
                        type=str,
                        default='0')

    parser.add_argument('--threads',
                        dest='threads',
                        help='Number of threads to be used for registration (default: all available)',
                        type=int,
                        default=multiprocessing.cpu_count())

    args = parser.parse_args()

    print(f"Looking for model weights in {os.path.dirname(__file__)}.")
    download_data(path=os.path.dirname(__file__))

    # Sanity Checks
    assert os.path.exists(args.t1), 'LST.AI aborted. T1w Image Path does not exist.'
    assert os.path.exists(args.flair), 'LST.AI aborted. Flair Image Path does not exist.'
    assert str(args.t1).endswith(".nii.gz"), 'Please provide T1w as a zipped nifti.'
    assert str(args.flair).endswith(".nii.gz"), 'Please provide FLAIR as a zipped nifti.'
    assert not os.path.isfile(args.output), 'Please provide an output path, not a filename.'

    if not args.temp:
        work_dir = tempfile.mkdtemp(prefix='lst_ai_')
    else:
        work_dir = os.path.abspath(args.temp)
        # make temp directory in case it does not exist
        if not os.path.exists(work_dir):
            os.makedirs(work_dir)

    #  Define Image Paths (original space)
    path_org_t1w = os.path.join(work_dir, 'sub-X_ses-Y_space-t1w_T1w.nii.gz')
    path_org_flair = os.path.join(work_dir, 'sub-X_ses-Y_space-flair_FLAIR.nii.gz')
    path_org_stripped_t1w = os.path.join(work_dir, 'sub-X_ses-Y_space-t1w_desc-stripped_T1w.nii.gz')
    path_org_stripped_flair = os.path.join(work_dir, 'sub-X_ses-Y_space-flair_desc-stripped_FLAIR.nii.gz')

    #  Define Image Paths (MNI space)
    path_mni_t1w = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_T1w.nii.gz')
    path_mni_flair = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_FLAIR.nii.gz')
    path_mni_stripped_t1w = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_desc-stripped_T1w.nii.gz')
    path_mni_stripped_flair = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_desc-stripped_FLAIR.nii.gz')

    # Masks
    path_orig_brainmask_t1w = os.path.join(work_dir, 'sub-X_ses-Y_space-t1w_T1w_mask.nii.gz')
    path_orig_brainmask_flair = os.path.join(work_dir, 'sub-X_ses-Y_space-flair_FLAIR_mask.nii.gz')
    path_mni_brainmask = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_brainmask.nii.gz')

    # Temp Segmentation results
    path_orig_segmentation =  os.path.join(work_dir, 'sub-X_ses-Y_space-flair_seg.nii.gz')
    path_mni_segmentation = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_seg.nii.gz')
    path_orig_annotated_segmentation =  os.path.join(work_dir, 'sub-X_ses-Y_space-flair_seg-annotated.nii.gz')
    path_mni_annotated_segmentation = os.path.join(work_dir, 'sub-X_ses-Y_space-mni_seg-annotated.nii.gz')

    # Output paths (in original space)
    filename_output_segmentation = "space-flair_seg-lst.nii.gz"
    filename_output_annotated_segmentation = "space-flair_desc-annotated_seg-lst.nii.gz"

    # Stats
    filename_output_stats_segmentation = "lesion_stats.csv"
    filename_output_stats_annotated_segmentation = "annotated_lesion_stats.csv"

    # affines
    path_affine_mni_t1w = os.path.join(work_dir, 'affine_t1w_to_mni.mat')
    path_affine_mni_flair = os.path.join(work_dir, 'affine_flair_to_mni.mat')

    # directories
    lst_dir = os.path.dirname(__file__)
    parent_dir = os.path.dirname(__file__)

    # atlas files
    t1w_atlas = os.path.join(parent_dir, "atlas", "sub-mni152_space-mni_t1.nii.gz")
    t1w_atlas_stripped = os.path.join(parent_dir, "atlas", "sub-mni152_space-mni_t1bet.nii.gz")
    atlas_mask = os.path.join(parent_dir, "atlas", "sub-mni152_space-mni_msmask.nii.gz")
    atlas_t1 = t1w_atlas
    atlas_warp = os.path.join(work_dir, "atlas_warp_field.nii.gz")
    atlas_mask_warped = os.path.join(work_dir,"atlas_mask_warped.nii.gz")

    # model weights
    model_directory = os.path.join(parent_dir, 'model')

    # make output path (in case it does not exist)
    if not os.path.exists(args.output):
        os.makedirs(args.output)

    if os.path.isfile(args.existing_seg) and not args.annotate_only:
        print("Existing segmentation may only be used with --annotate_only flag.")
        print("Aborted.")
        sys.exit(1)

    # Annotation only
    if args.annotate_only:
        print("LST-AI assumes existing segmentation to be in FLAIR space.")
        if os.path.isfile(args.existing_seg):
            shutil.copy(args.existing_seg, path_orig_segmentation)
        else:
            print("Existing segmentation does not exist.")
            print("Please provide a valid path via --existing_seg.")
            sys.exit(1)

        # Register T1w to FLAIR native
        t1w_native= os.path.join(work_dir,"T1w.nii.gz")
        native_affine = os.path.join(work_dir,"affine_native_t1_flair.mat")
        shutil.copy(args.t1, t1w_native)

        if not args.stripped:

            shutil.copy(args.flair, path_org_flair)
            rigid_reg(moving=t1w_native,
                    fixed=path_org_flair,
                    affine=native_affine,
                    destination=path_org_t1w,
                    n_threads=args.threads)

            # strip only T1w
            if args.fast:
                run_hdbet(input_image=path_org_t1w, output_image=path_org_stripped_t1w, device=args.device, mode="fast")
            else:
                run_hdbet(input_image=path_org_t1w, output_image=path_org_stripped_t1w, device=args.device, mode="accurate")

            # move processed mask to correct naming convention
            hdbet_mask = path_org_stripped_t1w.replace(".nii.gz", "_mask.nii.gz")
            shutil.move(hdbet_mask, path_orig_brainmask_flair)

            # apply brain mask to FLAIR
            apply_mask(input_image=path_org_flair,
                    mask=path_orig_brainmask_flair,
                    output_image=path_org_stripped_flair)
        else:
            shutil.copy(args.flair, path_org_stripped_flair)
            rigid_reg(moving=t1w_native,
                    fixed=path_org_stripped_flair,
                    affine=native_affine,
                    destination=path_org_stripped_t1w,
                    n_threads=args.threads)


        annotate_lesions(atlas_t1=t1w_atlas,
                        atlas_mask=atlas_mask,
                        t1w_native=path_org_stripped_t1w,
                        seg_native=path_orig_segmentation,
                        out_atlas_warp=atlas_warp,
                        out_atlas_mask_warped=atlas_mask_warped,
                        out_annotated_native=path_orig_annotated_segmentation)

        shutil.copy(path_orig_annotated_segmentation,
                    os.path.join(args.output, filename_output_annotated_segmentation))


    # Segmentation only + (opt. Annotation)
    else:

        if args.stripped:
            print("Images have been provided as skull-stripped images. Skipping skull-stripping via HD-BET.")
            shutil.copy(args.t1, path_org_stripped_t1w)
            shutil.copy(args.flair, path_org_stripped_flair)

            mni_registration(t1w_atlas_stripped,
                            path_org_stripped_t1w,
                            path_org_stripped_flair,
                            path_mni_stripped_t1w,
                            path_mni_stripped_flair,
                            path_affine_mni_t1w,
                            path_affine_mni_flair,
                            n_threads=args.threads)

        else:
            print("Images need to be skull-stripped. Processing with HD-BET.")
            shutil.copy(args.t1, path_org_t1w)
            shutil.copy(args.flair, path_org_flair)

            # first register to MNI space
            mni_registration(t1w_atlas,
                            path_org_t1w,
                            path_org_flair,
                            path_mni_t1w,
                            path_mni_flair,
                            path_affine_mni_t1w,
                            path_affine_mni_flair,
                            n_threads=args.threads)

            # then skull strip T1w
            if args.fast:
                run_hdbet(input_image=path_mni_t1w, output_image=path_mni_stripped_t1w, device=args.device, mode="fast")
            else:
                run_hdbet(input_image=path_mni_t1w, output_image=path_mni_stripped_t1w, device=args.device, mode="accurate")

            # move processed mask to correct naming convention
            hdbet_mask = path_mni_stripped_t1w.replace(".nii.gz", "_mask.nii.gz")
            shutil.copy(hdbet_mask, path_mni_brainmask)

            # then apply brain mask to FLAIR
            apply_mask(input_image=path_mni_flair,
                    mask=path_mni_brainmask,
                    output_image=path_mni_stripped_flair)

            # create masked images in original space
            apply_warp(image_org_space=path_org_t1w,
                        affine=path_affine_mni_t1w,
                        origin=path_mni_brainmask,
                        target=path_orig_brainmask_t1w,
                        reverse=True,
                        n_threads=args.threads)

            apply_warp(image_org_space=path_org_flair,
                        affine=path_affine_mni_flair,
                        origin=path_mni_brainmask,
                        target=path_orig_brainmask_flair,
                        reverse=True,
                        n_threads=args.threads)

            apply_mask(input_image=path_org_t1w,
                        mask=path_orig_brainmask_t1w,
                        output_image=path_org_stripped_t1w)

            apply_mask(input_image=path_org_flair,
                        mask=path_orig_brainmask_flair,
                        output_image=path_org_stripped_flair)


        # Segmentation
        print("Running LST Segmentation.")
        unet_segmentation(mni_t1=path_mni_stripped_t1w,
                        mni_flair=path_mni_stripped_flair,
                        model_path=model_directory,
                        output_segmentation_path=path_mni_segmentation,
                        device=args.device,
                        input_shape=(192,192,192),
                        threshold=args.threshold)

        apply_warp(image_org_space=path_org_stripped_flair,
                    affine=path_affine_mni_flair,
                    target=path_orig_segmentation,
                    origin=path_mni_segmentation,
                    reverse=True,
                    n_threads=args.threads)

        # store the segmentations
        shutil.copy(path_orig_segmentation, os.path.join(args.output, filename_output_segmentation))

        # Annotation
        if not args.segment_only:
            annotate_lesions(atlas_t1=t1w_atlas,
                            atlas_mask=atlas_mask,
                            t1w_native=path_mni_stripped_t1w,
                            seg_native=path_mni_segmentation,
                            out_atlas_warp=atlas_warp,
                            out_atlas_mask_warped=atlas_mask_warped,
                            out_annotated_native=path_mni_annotated_segmentation)

            # warp results back to original FLAIR space
            apply_warp(image_org_space=path_org_stripped_flair,
                        affine=path_affine_mni_flair,
                        origin=path_mni_annotated_segmentation,
                        target=path_orig_annotated_segmentation,
                        reverse=True,
                        n_threads=args.threads)

            # store the segmentations
            shutil.copy(path_orig_annotated_segmentation, os.path.join(args.output, filename_output_annotated_segmentation))

    # Compute Stats of (annotated) segmentation if they exist
    if os.path.exists(path_orig_segmentation):
        compute_stats(mask_file=path_orig_segmentation,
                      output_file=os.path.join(args.output, filename_output_stats_segmentation),
                      multi_class=False)

    if os.path.exists(path_orig_annotated_segmentation):
        compute_stats(mask_file=path_orig_annotated_segmentation,
                      output_file=os.path.join(args.output, filename_output_stats_annotated_segmentation),
                      multi_class=True)

    print(f"Results in {work_dir}")
    if not args.temp:
        print("Delete temporary directory: {work_dir}")
        shutil.rmtree(work_dir)
    print("Done.")
