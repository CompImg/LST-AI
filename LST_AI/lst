#!/usr/bin/env python -W ignore::DeprecationWarning
# coding: utf-8

"""
REQUIRES
> greedy
> HD-BET
> MNI atlas files
> Model files
"""
import os
import tempfile
import shutil
import argparse
from warnings import filterwarnings
filterwarnings("ignore")

from LST_AI.strip import run_hdbet 
from LST_AI.register import mni_registration, warp_mni_to_orig, warp_orig_to_mni
from LST_AI.segment import unet_segmentation
from LST_AI.annotate import annotate_lesions
from LST_AI.utils import download_data

if __name__ == "__main__":

    download_data()    

    print("###########################\n")
    print("Thank you for using LST-AI. If you publish your results, please cite our paper.:")
    print("TBD.")
    print("###########################\n")

    parser = argparse.ArgumentParser(description='Segment / Label MS lesions according to McDonald criteria.')

    # Input Images
    parser.add_argument('--t1',
                        dest='t1',
                        help='Path to T1 image',
                        type=str,
                        required=True)
    parser.add_argument('--flair',
                        dest='flair',
                        help='Path to FLAIR image',
                        type=str,
                        required=True)
    # Output Images
    parser.add_argument('--output',
                        dest='output',
                        help='Path to output segmentation nifti path.',
                        type=str,
                        required=True)
   
    parser.add_argument('--existing_seg',                        
                        dest='existing_seg',
                        default='',
                        help='Path to output segmentation image (will be saved in FLAIR space)',
                        type=str)
    
    # Temporary directory
    parser.add_argument('--temp',
                        dest='temp',
                        default='',
                        help='Path to temp directory.',
                        type=str)
    
    # Mode (segment only, annotate only, segment+annotate (default))
    parser.add_argument('--segment_only',                        
                        action='store_true',
                        dest='segment_only',
                        help='Only perform the segmentation, and skip lesion annotation.')
    
    parser.add_argument('--annotate_only',                        
                        action='store_true',
                        dest='annotate_only',
                        help='Only annotate lesion files without segmentation of lesions.')
    
    parser.add_argument('--skull_stripped',                        
                        action='store_true',
                        dest='stripped',
                        help='Images are already skull stripped. Skip skull-stripping.')
    
    # Model Settings
    parser.add_argument('--threshold',
                        dest='threshold',
                        help='Threshold for binarizing the joint segmentation (default: 0.5)',
                        type=float,
                        default=0.5)
    
    parser.add_argument('--fast-mode',                        
                        action='store_true',
                        dest='fast',
                        help='Only use one model for hd-bet.')

    # Computing Resources
    parser.add_argument('--use_gpu',
                        action='store_true',
                        dest='use_gpu',
                        help='Use GPU (for HD-BET and segmentation)')
    
    args = parser.parse_args()

    # Sanity Checks
    assert os.path.exists(args.t1), 'LST.AI aborted. T1w Image Path does not exist.'
    assert os.path.exists(args.flair), 'LST.AI aborted. Flair Image Path does not exist.'
    assert str(args.t1).endswith(".nii.gz"), 'Please provide T1w as a zipped nifti.'
    assert str(args.flair).endswith(".nii.gz"), 'Please provide FLAIR as a zipped nifti.'
    assert not os.path.isfile(args.output), 'Please provide an output path, not a filename.'

    # Create a temporary directory if non is given
    use_temp = False

    if not args.temp:
        working_directory = tempfile.mkdtemp(prefix='lst_ai_')
        print(f'Using {working_directory} as a temporary working directory.')
        use_temp = True
    else:
        working_directory = os.path.abspath(args.temp)
        # make temp directory in case it does not exist
        if not os.path.exists(working_directory):
            os.makedirs(working_directory)   


    # 1) Copy and strip NIFTIs if required

    path_org_t1w = os.path.join(working_directory, 'sub-X_ses-Y_space-orig_T1w.nii.gz')
    path_org_flair = os.path.join(working_directory, 'sub-X_ses-Y_space-orig_FLAIR.nii.gz')

    path_org_stripped_t1w = os.path.join(working_directory, 'sub-X_ses-Y_space-orig_desc-stripped_T1w.nii.gz')
    path_org_stripped_flair = os.path.join(working_directory, 'sub-X_ses-Y_space-orig_desc-stripped_FLAIR.nii.gz')

    path_mni_stripped_t1w = os.path.join(working_directory, 'sub-X_ses-Y_space-mni_desc-stripped_T1w.nii.gz')
    path_mni_stripped_flair = os.path.join(working_directory, 'sub-X_ses-Y_space-mni_desc-stripped_FLAIR.nii.gz')

    path_orig_segmentation =  os.path.join(working_directory, 'sub-X_ses-Y_space-orig_seg.nii.gz')
    path_mni_segmentation = os.path.join(working_directory, 'sub-X_ses-Y_space-mni_seg.nii.gz')

    path_orig_annotated_segmentation =  os.path.join(working_directory, 'sub-X_ses-Y_space-orig_seg-annotated.nii.gz')
    path_mni_annotated_segmentation = os.path.join(working_directory, 'sub-X_ses-Y_space-mni_seg-annotated.nii.gz')

    # make output path in case it does not exist
    if not os.path.exists(args.output):
        os.makedirs(args.output)   

    print(args.existing_seg)

    if args.annotate_only:
        if os.path.isfile(args.existing_seg):
            shutil.copy(args.existing_seg, path_orig_segmentation)
        else:
            print("Existing segmentation does not exist. Aborting.")
            exit()

   
    if args.stripped:
        print("Images are provided as skull-stripped images. Skipping HD-BET.")
        shutil.copy(args.t1, path_org_stripped_t1w)
        shutil.copy(args.flair, path_org_stripped_flair)

    else:
        print("Images need to be skull-stripped. Processing with HD-BET.")
        shutil.copy(args.t1, path_org_t1w)
        shutil.copy(args.flair, path_org_flair)

        if args.use_gpu:
            gpu = True
        else:
            gpu = False

        if args.fast:
            run_hdbet(input_image=path_org_t1w, output_image=path_org_stripped_t1w, use_gpu=gpu, fast_mode=True)
            run_hdbet(input_image=path_org_flair, output_image=path_org_stripped_flair, use_gpu=gpu, fast_mode=True)
        else:
            run_hdbet(input_image=path_org_t1w, output_image=path_org_stripped_t1w, use_gpu=gpu, fast_mode=False)
            run_hdbet(input_image=path_org_flair, output_image=path_org_stripped_flair, use_gpu=gpu, fast_mode=False)

    # 2) Register Images to Atlas

    lst_dir = os.getcwd()
    parent_directory = os.path.dirname(lst_dir)
    t1w_atlas = os.path.join(parent_directory, "atlas", "sub-mni152_space-mni_t1.nii.gz")
    t1w_atlas_stripped = os.path.join(parent_directory, "atlas", "sub-mni152_space-mni_t1bet.nii.gz")
    atlas_mask = os.path.join(parent_directory, "atlas", "sub-mni152_space-mni_msmask.nii.gz")
    greedy = os.path.join(parent_directory,"binaries", "greedy")
    model_directory = os.path.join(parent_directory, 'model')

    # affines
    path_affine_mni_stripped_t1w = os.path.join(working_directory, 'affine_t1w_to_mni.mat')
    path_affine_mni_stripped_flair = os.path.join(working_directory, 'affine_flair_to_mni.mat')

    mni_registration(greedy,
                     t1w_atlas, 
                     path_org_stripped_t1w, 
                     path_org_stripped_flair, 
                     path_mni_stripped_t1w, 
                     path_mni_stripped_flair,
                     path_affine_mni_stripped_t1w, 
                     path_affine_mni_stripped_flair)
    
    
    if args.annotate_only:
        # register mask to MNI space
        print("Warp Mask to MNI Space using flair affine.")
        # we need to warp the original mask first to mni
        warp_orig_to_mni(greedy=greedy,
                         image_org_space=path_mni_stripped_flair,
                         image_to_mni_affine=path_affine_mni_stripped_flair,
                         seg_mni=path_mni_segmentation,
                         seg_orig=path_orig_segmentation)
     
    # 3) segmentation:
    if not args.annotate_only:
        print("Running LST Segmentation.")
        unet_segmentation(mni_t1=path_mni_stripped_t1w,
                          mni_flair=path_mni_stripped_flair,
                          model_path=model_directory,
                          output_segmentation_path=path_mni_segmentation,
                          input_shape=(192,192,192), 
                          threshold=args.threshold)
        
        warp_mni_to_orig(greedy=greedy,
                    image_org_space=path_org_stripped_flair,
                    image_to_mni_affine=path_affine_mni_stripped_flair,
                    seg_mni=path_mni_segmentation,
                    seg_orig=path_orig_segmentation)
        
        # store the segmentations
        shutil.copy(path_orig_segmentation, os.path.join(args.output, "space-orig_seg-lst.nii.gz"))
                                     

    # 4) Annotate (if required)

    atlas_t1 = t1w_atlas
    atlas_warp = os.path.join(working_directory, "warp_field.nii.gz")
    atlas_mask_warped = os.path.join(working_directory,"tmp_mask.nii.gz")

    if not args.segment_only:
        annotate_lesions(greedy=greedy, 
                         atlas_t1=t1w_atlas, 
                         atlas_mask=atlas_mask, 
                         t1w_native=path_mni_stripped_t1w,
                         seg_native=path_mni_segmentation,
                         out_atlas_warp=atlas_warp, 
                         out_atlas_mask_warped=atlas_mask_warped,
                         out_annotated_native=path_mni_annotated_segmentation)
        
        # warp results back to original space
        warp_mni_to_orig(greedy=greedy,
                        image_org_space=path_org_stripped_flair,
                        image_to_mni_affine=path_affine_mni_stripped_flair,
                        seg_mni=path_mni_annotated_segmentation,
                        seg_orig=path_orig_annotated_segmentation)
        
        # store the segmentations
        shutil.copy(path_orig_annotated_segmentation, os.path.join(args.output, "space-orig_desc-annotated_seg-lst.nii.gz"))
    
        
    print(f"Results in {working_directory}")
    if use_temp:
        print("Delete temporary directory: {working_directory}")
        shutil.rmtree(working_directory)
    print("Done.")

